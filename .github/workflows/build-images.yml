name: Build VPP Images
on:
  pull_request:
    branches: 
      - master
  push:
    branches: 
      - master
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:
    
jobs:
  build-images:
    name: "VPP ${{ matrix.tag }}"
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: ligato/vpp
      REPO: ${{ matrix.repo }}
      TAG: ${{ matrix.tag }}
    strategy:
      fail-fast: false
      matrix:
        tag: ['master', 'latest', '24.06', '24.02', '23.10', '23.06']
        include:
        - tag: 'master'
          repo: 'master'
        - tag: 'latest'
          repo: 'release'
        - tag: '24.06'
          repo: '2406'
        - tag: '24.02'
          repo: '2402'
        - tag: '23.10'
          repo: '2310'
        - tag: '23.06'
          repo: '2306'
    
    steps:
    - name: "Checkout"
      uses: actions/checkout@v3

    - name: "Set up build environment"
      run: |
        sudo apt-get update
        sudo apt-get install -y make ninja-build

    - name: "Build VPP"
      run: |
        make build-release
        # Store the VPP version for later use
        echo "VPP_VERSION=$(make version)" >> $GITHUB_ENV

    - name: "Build Docker image"
      run: |
        docker build \
          --build-arg VPP_VERSION=${{ env.VPP_VERSION }} \
          --tag "$DOCKER_REPO:$TAG" \
          -f build/docker/Dockerfile .

    - name: "Test image"
      run: |
        docker run --rm "$DOCKER_REPO:$TAG" vppctl show version

    - name: "Publish image"
      if: github.event_name != 'pull_request'
      run: |
        # Create version tag without build metadata
        export CLEAN_VERSION=$(echo ${{ env.VPP_VERSION }} | cut -d'+' -f1)
        docker tag "$DOCKER_REPO:$TAG" "$DOCKER_REPO:$CLEAN_VERSION"
        docker images "$DOCKER_REPO"
        
        if [ $GITHUB_EVENT_NAME == "schedule" ] && curl -sSflL "https://index.docker.io/v1/repositories/$DOCKER_REPO/tags/$CLEAN_VERSION" >/dev/null; then
          echo "Image $DOCKER_REPO:$CLEAN_VERSION has already been published."
        else
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push "$DOCKER_REPO:$CLEAN_VERSION"
          docker push "$DOCKER_REPO:$TAG"
        fi